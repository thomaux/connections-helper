<html>
<head>
    <script src="https://unpkg.com/redux@4.2.1/dist/redux.min.js"></script>
    <style>
        :root {
            --purple: #ba81c5;
            --yellow: #f9df6d;
            --green: #a0c35a;
            --blue: #b0c4ef;
        }

        @property --bg-left {
            syntax: "<color>";
            inherits: false;
            initial-value: #efefe6;
        }
        
        @property --bg-right {
            syntax: "<color>";
            inherits: false;
            initial-value: #efefe6;
        }

        html {
            font-family: Arial, Helvetica, sans-serif;
        }

        .flex-grid {
            display: flex;
            flex-direction: column
        }

        .row {
            display: flex;
            flex-direction: row;
            justify-content: center;
        }

        #color-toolbar {
            display: flex;
            flex-direction: row;
            align-items: center;
            justify-content: center;
        }

        .item,
        button {
            height: 80px;
            display: flex;
            align-items: center;
            justify-content: center;
            border-radius: 6px;
            cursor: pointer;
        }

        .item {
            --bg-left: #efefe6;
            --bg-right: #efefe6;
            width: 150px;
            margin: 20px;
            background: linear-gradient(155deg, var(--bg-left) 50%, var(--bg-right) 50%);
            font-size: 20px;
            font-weight: bold;
            text-transform: uppercase;
            transition: --bg-left 0.2s ease-in-out, --bg-right 0.2s ease-in-out;
        }

        button {
            --bg-left: rgb(239, 239, 239);
            width: 120px;
            margin: 15px;
            border: none;
            background-color: var(--bg-left);
        }

        button:first-child {
            margin-left: 20px;
        }

        button:last-child {
            margin-right: 20px;
        }

        button.active {
            border: 3px solid #5a594e;
        }

        .purple {
            --bg-left: var(--purple);
            --bg-right: var(--purple);
        }
        
        .green {
            --bg-left: var(--green);
            --bg-right: var(--green);
        }
        
        .blue {
            --bg-left: var(--blue);
            --bg-right: var(--blue);
        }
        
        .yellow {
            --bg-left: var(--yellow);
            --bg-right: var(--yellow);
        }

        .purple.yellow {
            --bg-left: var(--purple);
            --bg-right: var(--yellow);
        }
        .purple.green {
            --bg-left: var(--purple);
            --bg-right: var(--green);
        }
        .purple.blue {
            --bg-left: var(--purple);
            --bg-right: var(--blue);
        }
        .blue.yellow {
            --bg-left: var(--blue);
            --bg-right: var(--yellow);
        }
        .blue.green {
            --bg-left: var(--blue);
            --bg-right: var(--green);
        }
        .green.yellow {
            --bg-left: var(--green);
            --bg-right: var(--yellow);
        }
    </style>
    <link rel="icon" href="data:image/svg+xml,%3C%3Fxml version='1.0' encoding='UTF-8' standalone='no'%3F%3E%3C!DOCTYPE svg PUBLIC '-//W3C//DTD SVG 1.1//EN' 'http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd'%3E%3Csvg width='100%25' height='100%25' viewBox='0 0 20 20' version='1.1' xmlns='http://www.w3.org/2000/svg' xmlns:xlink='http://www.w3.org/1999/xlink' xml:space='preserve' xmlns:serif='http://www.serif.com/' style='fill-rule:evenodd;clip-rule:evenodd;stroke-linejoin:round;stroke-miterlimit:2;'%3E%3Cpath d='M17.7,3.6L17.7,5.6L14.5,5.6L14.5,2.3L16.4,2.3C17.2,2.3 17.7,2.9 17.7,3.6Z' style='fill:rgb(249,223,109);fill-rule:nonzero;'/%3E%3Crect x='2.3' y='10.4' width='3.2' height='3.5' style='fill:rgb(188,112,196);'/%3E%3Crect x='10.4' y='10.4' width='7.3' height='3.4' style='fill:rgb(160,195,90);'/%3E%3Cpath d='M16.4,1.4L3.5,1.4C2.3,1.4 1.3,2.4 1.3,3.6L1.3,16.5C1.3,17.7 2.3,18.6 3.5,18.6L16.4,18.6C17.6,18.6 18.5,17.6 18.5,16.5L18.5,3.5C18.6,2.4 17.6,1.4 16.4,1.4ZM10.4,2.3L13.6,2.3L13.6,5.5L10.4,5.5L10.4,2.3ZM2.3,3.5C2.3,2.8 2.9,2.2 3.6,2.2L9.6,2.2L9.6,5.4L2.3,5.4C2.3,5.5 2.3,3.5 2.3,3.5ZM2.3,6.3L13.7,6.3L13.7,9.5L2.3,9.5L2.3,6.3ZM9.6,10.4L9.6,13.6L6.3,13.6L6.3,10.4L9.6,10.4ZM5.5,17.7L3.5,17.7C2.8,17.7 2.2,17.1 2.2,16.4L2.2,14.5L5.4,14.5L5.4,17.7L5.5,17.7ZM5.5,13.7L2.3,13.7L2.3,10.5L5.5,10.5L5.5,13.7ZM17.7,16.4C17.7,17.1 17.1,17.7 16.4,17.7L6.3,17.7L6.3,14.5L17.7,14.5L17.7,16.4ZM17.7,13.7L10.4,13.7L10.4,10.5L17.7,10.5L17.7,13.7ZM17.7,9.6L14.5,9.6L14.5,6.3L17.7,6.3L17.7,9.6ZM17.7,5.5L14.5,5.5L14.5,2.3L16.4,2.3C17.1,2.3 17.7,2.9 17.7,3.6L17.7,5.5Z' style='fill-rule:nonzero;'/%3E%3Cpath d='M5.5,14.5L5.5,17.7L3.5,17.7C2.8,17.7 2.2,17.1 2.2,16.4L2.2,14.5L5.5,14.5Z' style='fill:white;fill-rule:nonzero;'/%3E%3Crect x='6.3' y='10.4' width='3.2' height='3.2' style='fill:white;'/%3E%3Crect x='14.5' y='6.3' width='3.2' height='3.2' style='fill:white;'/%3E%3Crect x='10.4' y='2.3' width='3.2' height='3.2' style='fill:white;'/%3E%3Cpath d='M17.7,14.5L17.7,16.4C17.7,17.1 17.1,17.7 16.4,17.7L6.3,17.7L6.3,14.5L17.7,14.5Z' style='fill:rgb(249,223,109);fill-rule:nonzero;'/%3E%3Crect x='2.3' y='6.3' width='11.4' height='3.2' style='fill:rgb(176,196,239);'/%3E%3Cpath d='M9.6,2.2L9.6,5.5L2.3,5.5L2.3,3.5C2.3,2.8 2.9,2.2 3.6,2.2L9.6,2.2Z' style='fill:rgb(188,112,196);fill-rule:nonzero;'/%3E%3C/svg%3E%0A">
    <title>Connections Helper</title>
</head>

<body>
    <div class="flex-grid">
        <% items.forEach(function(item, idx) { %>
            <% if(idx % 4===0) { %>
                <div class="row">
                    <% } %>
                        <div class="item" id="item-<%= idx %>">
                            <%= item %>
                        </div>
                        <% if(idx % 4===3) { %>
                </div>
                <% } %>
                    <% }) %>
    </div>
    <div id="color-toolbar">
        <button class="yellow"></button>
        <button class="green"></button>
        <button class="blue"></button>
        <button class="purple"></button>
        <button id="eraser">Clear</button>
    </div>
    <script>
        const actionTypes = {
            SET_COLOR: 'SET_COLOR',
            CLEAR: 'CLEAR',
            SELECT_ITEM: 'SELECT_ITEM',
        };

        const defaultState = {
            activeColor: undefined,
            items: {
                'item-0': [],
                'item-1': [],
                'item-2': [],
                'item-3': [],
                'item-4': [],
                'item-5': [],
                'item-6': [],
                'item-7': [],
                'item-8': [],
                'item-9': [],
                'item-10': [],
                'item-11': [],
                'item-12': [],
                'item-13': [],
                'item-14': [],
                'item-15': [],
            }
        };

        const store = Redux.createStore((state = defaultState, action) => {
            switch (action.type) {
                case actionTypes.SET_COLOR:
                    return {
                        ...state,
                        activeColor: action.color,
                    };

                case actionTypes.SELECT_ITEM:
                    // Toggle color
                    if (state.items[action.id].includes(state.activeColor)) {
                        return {
                            ...state,
                            items: {
                                ...state.items,
                                [action.id]: state.items[action.id].filter(color => color !== state.activeColor),
                            }
                        };
                    }

                    // Don't allow more than 2 colors per word
                    if (state.items[action.id].length >= 2) {
                        return state;
                    }

                    return {
                        ...state,
                        items: {
                            ...state.items,
                            [action.id]: [...state.items[action.id], state.activeColor]
                        }
                    };

                case actionTypes.CLEAR:
                    return defaultState;

                default:
                    return state;
            }
        });

        store.subscribe(() => {
            const state = store.getState();
            Object.entries(state.items).forEach(([id, colors]) => {
                const item = document.getElementById(id);
                if (!item) {
                    throw new Error(`Could not find element with id ${id}`);
                }

                item.classList.remove('purple', 'green', 'blue', 'yellow');
                item.classList.add(...colors);
            });

            document.querySelectorAll('#color-toolbar button').forEach(button => {
                button.classList.remove('active');
            });

            if (state.activeColor) {
                document.querySelector(`#color-toolbar .${state.activeColor}`).classList.add('active');
            }
        });

        document.querySelectorAll('.item').forEach(item => {
            item.addEventListener('click', event => {
                store.dispatch({ type: actionTypes.SELECT_ITEM, id: event.target.id })
            });
        });

        document.querySelectorAll('#color-toolbar button').forEach(button => {
            button.addEventListener('click', event => {
                if (event.target.id === 'eraser') {
                    store.dispatch({ type: actionTypes.CLEAR });
                } else {
                    store.dispatch({ type: actionTypes.SET_COLOR, color: event.target.className });
                }
            });
        });
    </script>
</body>

</html>